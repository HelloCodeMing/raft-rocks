// Code generated by protoc-gen-go.
// source: raftkv.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CommandType int32

const (
	CommandType_Noop CommandType = 0
	CommandType_Get  CommandType = 1
	CommandType_Put  CommandType = 2
)

var CommandType_name = map[int32]string{
	0: "Noop",
	1: "Get",
	2: "Put",
}
var CommandType_value = map[string]int32{
	"Noop": 0,
	"Get":  1,
	"Put":  2,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}
func (CommandType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Status int32

const (
	Status_OK        Status = 0
	Status_Timeout   Status = 1
	Status_NoSuchKey Status = 2
	Status_NotLeader Status = 3
	Status_NoSession Status = 4
)

var Status_name = map[int32]string{
	0: "OK",
	1: "Timeout",
	2: "NoSuchKey",
	3: "NotLeader",
	4: "NoSession",
}
var Status_value = map[string]int32{
	"OK":        0,
	"Timeout":   1,
	"NoSuchKey": 2,
	"NotLeader": 3,
	"NoSession": 4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// command for KV, it will be replicated to peers, stored in log, and applied to KVStorage
type KVCommand struct {
	CmdType CommandType `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,enum=pb.CommandType" json:"cmd_type,omitempty"`
	// Types that are valid to be assigned to Command:
	//	*KVCommand_GetCommand
	//	*KVCommand_PutCommand
	//	*KVCommand_Noop
	Command   isKVCommand_Command `protobuf_oneof:"command"`
	Term      int32               `protobuf:"varint,5,opt,name=term" json:"term,omitempty"`
	Index     int32               `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Timestamp int64               `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *KVCommand) Reset()                    { *m = KVCommand{} }
func (m *KVCommand) String() string            { return proto.CompactTextString(m) }
func (*KVCommand) ProtoMessage()               {}
func (*KVCommand) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isKVCommand_Command interface {
	isKVCommand_Command()
}

type KVCommand_GetCommand struct {
	GetCommand *GetReq `protobuf:"bytes,2,opt,name=get_command,json=getCommand,oneof"`
}
type KVCommand_PutCommand struct {
	PutCommand *PutReq `protobuf:"bytes,3,opt,name=put_command,json=putCommand,oneof"`
}
type KVCommand_Noop struct {
	Noop []byte `protobuf:"bytes,4,opt,name=noop,proto3,oneof"`
}

func (*KVCommand_GetCommand) isKVCommand_Command() {}
func (*KVCommand_PutCommand) isKVCommand_Command() {}
func (*KVCommand_Noop) isKVCommand_Command()       {}

func (m *KVCommand) GetCommand() isKVCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *KVCommand) GetCmdType() CommandType {
	if m != nil {
		return m.CmdType
	}
	return CommandType_Noop
}

func (m *KVCommand) GetGetCommand() *GetReq {
	if x, ok := m.GetCommand().(*KVCommand_GetCommand); ok {
		return x.GetCommand
	}
	return nil
}

func (m *KVCommand) GetPutCommand() *PutReq {
	if x, ok := m.GetCommand().(*KVCommand_PutCommand); ok {
		return x.PutCommand
	}
	return nil
}

func (m *KVCommand) GetNoop() []byte {
	if x, ok := m.GetCommand().(*KVCommand_Noop); ok {
		return x.Noop
	}
	return nil
}

func (m *KVCommand) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *KVCommand) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *KVCommand) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KVCommand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KVCommand_OneofMarshaler, _KVCommand_OneofUnmarshaler, _KVCommand_OneofSizer, []interface{}{
		(*KVCommand_GetCommand)(nil),
		(*KVCommand_PutCommand)(nil),
		(*KVCommand_Noop)(nil),
	}
}

func _KVCommand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KVCommand)
	// command
	switch x := m.Command.(type) {
	case *KVCommand_GetCommand:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetCommand); err != nil {
			return err
		}
	case *KVCommand_PutCommand:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PutCommand); err != nil {
			return err
		}
	case *KVCommand_Noop:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Noop)
	case nil:
	default:
		return fmt.Errorf("KVCommand.Command has unexpected type %T", x)
	}
	return nil
}

func _KVCommand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KVCommand)
	switch tag {
	case 2: // command.get_command
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetReq)
		err := b.DecodeMessage(msg)
		m.Command = &KVCommand_GetCommand{msg}
		return true, err
	case 3: // command.put_command
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutReq)
		err := b.DecodeMessage(msg)
		m.Command = &KVCommand_PutCommand{msg}
		return true, err
	case 4: // command.noop
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Command = &KVCommand_Noop{x}
		return true, err
	default:
		return false, nil
	}
}

func _KVCommand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KVCommand)
	// command
	switch x := m.Command.(type) {
	case *KVCommand_GetCommand:
		s := proto.Size(x.GetCommand)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVCommand_PutCommand:
		s := proto.Size(x.PutCommand)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KVCommand_Noop:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Noop)))
		n += len(x.Noop)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Session struct {
	ClientId int64  `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Sn       int64  `protobuf:"varint,2,opt,name=sn" json:"sn,omitempty"`
	LogId    string `protobuf:"bytes,3,opt,name=log_id,json=logId" json:"log_id,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Session) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Session) GetSn() int64 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *Session) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

type GetReq struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Key     string   `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetReq) Reset()                    { *m = GetReq{} }
func (m *GetReq) String() string            { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()               {}
func (*GetReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetReq) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *GetReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetRes struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=pb.Status" json:"status,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *GetRes) Reset()                    { *m = GetRes{} }
func (m *GetRes) String() string            { return proto.CompactTextString(m) }
func (*GetRes) ProtoMessage()               {}
func (*GetRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetRes) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func (m *GetRes) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type PutReq struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Key     string   `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value   string   `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *PutReq) Reset()                    { *m = PutReq{} }
func (m *PutReq) String() string            { return proto.CompactTextString(m) }
func (*PutReq) ProtoMessage()               {}
func (*PutReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *PutReq) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *PutReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PutReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type PutRes struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=pb.Status" json:"status,omitempty"`
}

func (m *PutRes) Reset()                    { *m = PutRes{} }
func (m *PutRes) String() string            { return proto.CompactTextString(m) }
func (*PutRes) ProtoMessage()               {}
func (*PutRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *PutRes) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

type OpenSessionReq struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *OpenSessionReq) Reset()                    { *m = OpenSessionReq{} }
func (m *OpenSessionReq) String() string            { return proto.CompactTextString(m) }
func (*OpenSessionReq) ProtoMessage()               {}
func (*OpenSessionReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *OpenSessionReq) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type OpenSessionRes struct {
	ClientId int64 `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *OpenSessionRes) Reset()                    { *m = OpenSessionRes{} }
func (m *OpenSessionRes) String() string            { return proto.CompactTextString(m) }
func (*OpenSessionRes) ProtoMessage()               {}
func (*OpenSessionRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *OpenSessionRes) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func init() {
	proto.RegisterType((*KVCommand)(nil), "pb.KVCommand")
	proto.RegisterType((*Session)(nil), "pb.Session")
	proto.RegisterType((*GetReq)(nil), "pb.GetReq")
	proto.RegisterType((*GetRes)(nil), "pb.GetRes")
	proto.RegisterType((*PutReq)(nil), "pb.PutReq")
	proto.RegisterType((*PutRes)(nil), "pb.PutRes")
	proto.RegisterType((*OpenSessionReq)(nil), "pb.OpenSessionReq")
	proto.RegisterType((*OpenSessionRes)(nil), "pb.OpenSessionRes")
	proto.RegisterEnum("pb.CommandType", CommandType_name, CommandType_value)
	proto.RegisterEnum("pb.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RaftKV service

type RaftKVClient interface {
	OpenSession(ctx context.Context, in *OpenSessionReq, opts ...grpc.CallOption) (*OpenSessionRes, error)
	Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutRes, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
}

type raftKVClient struct {
	cc *grpc.ClientConn
}

func NewRaftKVClient(cc *grpc.ClientConn) RaftKVClient {
	return &raftKVClient{cc}
}

func (c *raftKVClient) OpenSession(ctx context.Context, in *OpenSessionReq, opts ...grpc.CallOption) (*OpenSessionRes, error) {
	out := new(OpenSessionRes)
	err := grpc.Invoke(ctx, "/pb.RaftKV/OpenSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftKVClient) Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutRes, error) {
	out := new(PutRes)
	err := grpc.Invoke(ctx, "/pb.RaftKV/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftKVClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	out := new(GetRes)
	err := grpc.Invoke(ctx, "/pb.RaftKV/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RaftKV service

type RaftKVServer interface {
	OpenSession(context.Context, *OpenSessionReq) (*OpenSessionRes, error)
	Put(context.Context, *PutReq) (*PutRes, error)
	Get(context.Context, *GetReq) (*GetRes, error)
}

func RegisterRaftKVServer(s *grpc.Server, srv RaftKVServer) {
	s.RegisterService(&_RaftKV_serviceDesc, srv)
}

func _RaftKV_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftKVServer).OpenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RaftKV/OpenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftKVServer).OpenSession(ctx, req.(*OpenSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftKV_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftKVServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RaftKV/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftKVServer).Put(ctx, req.(*PutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftKV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RaftKV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftKVServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RaftKV",
	HandlerType: (*RaftKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenSession",
			Handler:    _RaftKV_OpenSession_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _RaftKV_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RaftKV_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raftkv.proto",
}

func init() { proto.RegisterFile("raftkv.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0xcd, 0x47, 0x9b, 0x2c, 0x37, 0xa3, 0x44, 0x57, 0x43, 0x8a, 0x0a, 0x12, 0x55, 0x24, 0xa4,
	0x52, 0xd1, 0x3e, 0x94, 0x87, 0x3d, 0x33, 0x1e, 0xba, 0x51, 0xd8, 0x26, 0x77, 0x1a, 0x8f, 0x55,
	0x9a, 0x78, 0x25, 0x5a, 0x13, 0x9b, 0xda, 0x99, 0xe8, 0x33, 0xff, 0x1b, 0xa1, 0xd8, 0x2e, 0x29,
	0x20, 0xa1, 0x89, 0xb7, 0x73, 0xef, 0x3d, 0x3e, 0x3e, 0xc7, 0x1f, 0x70, 0xbc, 0x4d, 0xef, 0xe4,
	0xfd, 0xc3, 0x84, 0x6f, 0x99, 0x64, 0xe8, 0xf0, 0x55, 0xf2, 0xc3, 0x86, 0x60, 0x7e, 0xfb, 0x9e,
	0x95, 0x65, 0x5a, 0xe5, 0x38, 0x82, 0xa3, 0xac, 0xcc, 0x97, 0x72, 0xc7, 0x69, 0x6c, 0x0f, 0xec,
	0x61, 0x6f, 0xfa, 0x74, 0xc2, 0x57, 0x13, 0x33, 0xbe, 0xd9, 0x71, 0x4a, 0xfc, 0xac, 0x54, 0x00,
	0xc7, 0x10, 0xae, 0xa9, 0x5c, 0x66, 0x7a, 0x16, 0x3b, 0x03, 0x7b, 0x18, 0x4e, 0xa1, 0xa1, 0xcf,
	0xa8, 0x24, 0xf4, 0xeb, 0xb9, 0x45, 0x60, 0x4d, 0xe5, 0x5e, 0x7a, 0x0c, 0x21, 0xaf, 0x5b, 0xba,
	0xdb, 0xd2, 0xaf, 0xeb, 0x3d, 0x9d, 0xd7, 0xbf, 0xe8, 0x27, 0xd0, 0xa9, 0x18, 0xe3, 0x71, 0x67,
	0x60, 0x0f, 0x8f, 0xcf, 0x2d, 0xa2, 0x2a, 0x44, 0xe8, 0x48, 0xba, 0x2d, 0xe3, 0xee, 0xc0, 0x1e,
	0x76, 0x89, 0xc2, 0x78, 0x02, 0xdd, 0xa2, 0xca, 0xe9, 0xb7, 0xd8, 0x53, 0x4d, 0x5d, 0xe0, 0x0b,
	0x08, 0x64, 0x51, 0x52, 0x21, 0xd3, 0x92, 0xc7, 0xfe, 0xc0, 0x1e, 0xba, 0xa4, 0x6d, 0x9c, 0x05,
	0xe0, 0x1b, 0x23, 0xc9, 0x27, 0xf0, 0x17, 0x54, 0x88, 0x82, 0x55, 0xf8, 0x1c, 0x82, 0x6c, 0x53,
	0xd0, 0x4a, 0x2e, 0x8b, 0x5c, 0xc5, 0x77, 0xc9, 0x91, 0x6e, 0x5c, 0xe4, 0xd8, 0x03, 0x47, 0x54,
	0x2a, 0xa5, 0x4b, 0x1c, 0x51, 0xe1, 0x33, 0xf0, 0x36, 0x6c, 0xdd, 0x30, 0x9b, 0x28, 0x01, 0xe9,
	0x6e, 0xd8, 0xfa, 0x22, 0x4f, 0xde, 0x81, 0xa7, 0xe3, 0xe3, 0x2b, 0xf0, 0x85, 0x16, 0x56, 0x5a,
	0xe1, 0x34, 0x6c, 0xc2, 0x9a, 0xbd, 0xc8, 0x7e, 0x86, 0x11, 0xb8, 0xf7, 0x74, 0xa7, 0x84, 0x03,
	0xd2, 0xc0, 0xe4, 0xcc, 0x48, 0x08, 0x4c, 0xc0, 0x13, 0x32, 0x95, 0xb5, 0x30, 0x97, 0xa1, 0x8e,
	0x6b, 0xa1, 0x3a, 0xc4, 0x4c, 0x9a, 0xf8, 0x0f, 0xe9, 0xa6, 0xa6, 0x46, 0x41, 0x17, 0xc9, 0x67,
	0xf0, 0xf4, 0xb1, 0xfe, 0xb7, 0x8d, 0x56, 0xd8, 0x3d, 0x14, 0x7e, 0x63, 0x84, 0x1f, 0x65, 0x2e,
	0x39, 0x85, 0xde, 0x15, 0xa7, 0xd5, 0x7e, 0xb7, 0x47, 0xdb, 0x49, 0xc6, 0x7f, 0x2c, 0x14, 0xff,
	0xbc, 0x9c, 0xd1, 0x6b, 0x08, 0x0f, 0xde, 0x28, 0x1e, 0x41, 0xe7, 0x92, 0x31, 0x1e, 0x59, 0xe8,
	0x83, 0x3b, 0xa3, 0x32, 0xb2, 0x1b, 0x70, 0x5d, 0xcb, 0xc8, 0x19, 0x7d, 0x00, 0x4f, 0x9b, 0x44,
	0x0f, 0x9c, 0xab, 0x79, 0x64, 0x61, 0x08, 0xfe, 0x4d, 0x51, 0x52, 0x56, 0x37, 0xbc, 0x27, 0x10,
	0x5c, 0xb2, 0x45, 0x9d, 0x7d, 0x99, 0xd3, 0x5d, 0xe4, 0xe8, 0x52, 0x7e, 0xa4, 0x69, 0x4e, 0xb7,
	0x91, 0x6b, 0xa6, 0xda, 0x54, 0xd4, 0x99, 0x7e, 0xb7, 0xc1, 0x23, 0xe9, 0x9d, 0x9c, 0xdf, 0xe2,
	0x29, 0x84, 0x07, 0x86, 0x11, 0x9b, 0x54, 0xbf, 0x47, 0xef, 0xff, 0xdd, 0x13, 0x89, 0x85, 0x2f,
	0x95, 0x31, 0x3c, 0xf8, 0x09, 0xfd, 0x16, 0x1b, 0xc2, 0x8c, 0x1a, 0x82, 0x7e, 0x5a, 0xfd, 0x16,
	0x8b, 0xc4, 0x5a, 0x79, 0xea, 0x37, 0xbf, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0x50, 0x25, 0xb0,
	0x4f, 0xdd, 0x03, 0x00, 0x00,
}
