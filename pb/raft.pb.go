// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	raft.proto
	raftkv.proto

It has these top-level messages:
	AppendEntriesReq
	AppendEntriesRes
	RequestVoteReq
	RequestVoteRes
	KVCommand
	Session
	GetReq
	GetRes
	PutReq
	PutRes
	OpenSessionReq
	OpenSessionRes
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RaftRole int32

const (
	RaftRole_Follower  RaftRole = 0
	RaftRole_Candidate RaftRole = 1
	RaftRole_Leader    RaftRole = 2
)

var RaftRole_name = map[int32]string{
	0: "Follower",
	1: "Candidate",
	2: "Leader",
}
var RaftRole_value = map[string]int32{
	"Follower":  0,
	"Candidate": 1,
	"Leader":    2,
}

func (x RaftRole) String() string {
	return proto.EnumName(RaftRole_name, int32(x))
}
func (RaftRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AppendEntriesReq struct {
	Term         int32        `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId     int32        `protobuf:"varint,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	PrevLogIndex int32        `protobuf:"varint,3,opt,name=prev_log_index,json=prevLogIndex" json:"prev_log_index,omitempty"`
	PrevLogTerm  int32        `protobuf:"varint,4,opt,name=prev_log_term,json=prevLogTerm" json:"prev_log_term,omitempty"`
	LogEntries   []*KVCommand `protobuf:"bytes,5,rep,name=log_entries,json=logEntries" json:"log_entries,omitempty"`
	LeaderCommit int32        `protobuf:"varint,6,opt,name=leader_commit,json=leaderCommit" json:"leader_commit,omitempty"`
}

func (m *AppendEntriesReq) Reset()                    { *m = AppendEntriesReq{} }
func (m *AppendEntriesReq) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesReq) ProtoMessage()               {}
func (*AppendEntriesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppendEntriesReq) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesReq) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntriesReq) GetPrevLogIndex() int32 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesReq) GetPrevLogTerm() int32 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesReq) GetLogEntries() []*KVCommand {
	if m != nil {
		return m.LogEntries
	}
	return nil
}

func (m *AppendEntriesReq) GetLeaderCommit() int32 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type AppendEntriesRes struct {
	Term    int32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesRes) Reset()                    { *m = AppendEntriesRes{} }
func (m *AppendEntriesRes) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRes) ProtoMessage()               {}
func (*AppendEntriesRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppendEntriesRes) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRes) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RequestVoteReq struct {
	Term         int32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	CandidateId  int32 `protobuf:"varint,2,opt,name=candidate_id,json=candidateId" json:"candidate_id,omitempty"`
	LastLogIndex int32 `protobuf:"varint,3,opt,name=last_log_index,json=lastLogIndex" json:"last_log_index,omitempty"`
	LastLogTerm  int32 `protobuf:"varint,4,opt,name=last_log_term,json=lastLogTerm" json:"last_log_term,omitempty"`
}

func (m *RequestVoteReq) Reset()                    { *m = RequestVoteReq{} }
func (m *RequestVoteReq) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteReq) ProtoMessage()               {}
func (*RequestVoteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestVoteReq) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteReq) GetCandidateId() int32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteReq) GetLastLogIndex() int32 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteReq) GetLastLogTerm() int32 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteRes struct {
	Term        int32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool  `protobuf:"varint,2,opt,name=vote_granted,json=voteGranted" json:"vote_granted,omitempty"`
}

func (m *RequestVoteRes) Reset()                    { *m = RequestVoteRes{} }
func (m *RequestVoteRes) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRes) ProtoMessage()               {}
func (*RequestVoteRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestVoteRes) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRes) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

func init() {
	proto.RegisterType((*AppendEntriesReq)(nil), "pb.AppendEntriesReq")
	proto.RegisterType((*AppendEntriesRes)(nil), "pb.AppendEntriesRes")
	proto.RegisterType((*RequestVoteReq)(nil), "pb.RequestVoteReq")
	proto.RegisterType((*RequestVoteRes)(nil), "pb.RequestVoteRes")
	proto.RegisterEnum("pb.RaftRole", RaftRole_name, RaftRole_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteRes, error)
	AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesRes, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteRes, error) {
	out := new(RequestVoteRes)
	err := grpc.Invoke(ctx, "/pb.Raft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesRes, error) {
	out := new(AppendEntriesRes)
	err := grpc.Invoke(ctx, "/pb.Raft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	RequestVote(context.Context, *RequestVoteReq) (*RequestVoteRes, error)
	AppendEntries(context.Context, *AppendEntriesReq) (*AppendEntriesRes, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RequestVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AppendEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0xbf, 0xae, 0xda, 0x30,
	0x14, 0xc6, 0x09, 0x97, 0x4b, 0xc3, 0x49, 0x82, 0x22, 0xab, 0x43, 0x44, 0x17, 0x9a, 0x76, 0x40,
	0x1d, 0x32, 0xc0, 0xd0, 0xa9, 0x52, 0x2b, 0xd4, 0x22, 0x54, 0xa6, 0xa8, 0x62, 0x8d, 0x4c, 0x7c,
	0x88, 0xa2, 0x26, 0x71, 0xb0, 0x0d, 0xed, 0xd4, 0x77, 0xe8, 0x2b, 0xf6, 0x49, 0x2a, 0x3b, 0x81,
	0xcb, 0xdf, 0x0d, 0xff, 0xfc, 0x11, 0x7f, 0xe7, 0x67, 0x03, 0x08, 0xba, 0x55, 0x51, 0x2d, 0xb8,
	0xe2, 0xa4, 0x5b, 0x6f, 0x46, 0xae, 0x5e, 0xff, 0x3c, 0x34, 0x24, 0xfc, 0x67, 0x81, 0xff, 0xa5,
	0xae, 0xb1, 0x62, 0x5f, 0x2b, 0x25, 0x72, 0x94, 0x31, 0xee, 0x08, 0x81, 0x9e, 0x42, 0x51, 0x06,
	0xd6, 0xd8, 0x9a, 0x3c, 0xc7, 0xe6, 0x37, 0x79, 0x03, 0x83, 0x02, 0x29, 0x43, 0x91, 0xe4, 0x2c,
	0xe8, 0x9a, 0x0d, 0xbb, 0x01, 0x4b, 0x46, 0xde, 0xc3, 0xb0, 0x16, 0x78, 0x48, 0x0a, 0x9e, 0x25,
	0x79, 0xc5, 0xf0, 0x77, 0xf0, 0x64, 0x12, 0xae, 0xa6, 0x2b, 0x9e, 0x2d, 0x35, 0x23, 0x21, 0x78,
	0xa7, 0x94, 0xf9, 0x7e, 0xcf, 0x84, 0x9c, 0x36, 0xf4, 0x43, 0x1f, 0x13, 0x81, 0xa3, 0xb7, 0xb1,
	0x29, 0x13, 0x3c, 0x8f, 0x9f, 0x26, 0xce, 0xd4, 0x8b, 0xea, 0x4d, 0xf4, 0x7d, 0x3d, 0xe7, 0x65,
	0x49, 0x2b, 0x16, 0x43, 0xc1, 0xb3, 0xb6, 0x2d, 0x79, 0x07, 0x5e, 0x5b, 0x2b, 0xe5, 0x65, 0x99,
	0xab, 0xa0, 0xdf, 0x1c, 0xdc, 0xc0, 0xb9, 0x61, 0xe1, 0xe7, 0x9b, 0x19, 0xe5, 0xdd, 0x19, 0x03,
	0x78, 0x25, 0xf7, 0x69, 0x8a, 0x52, 0x9a, 0x09, 0xed, 0xf8, 0xb8, 0x0c, 0xff, 0x5a, 0x30, 0x8c,
	0x71, 0xb7, 0x47, 0xa9, 0xd6, 0x5c, 0xe1, 0x23, 0x49, 0x6f, 0xc1, 0x4d, 0x69, 0xc5, 0x72, 0x46,
	0x15, 0xbe, 0x78, 0x72, 0x4e, 0xac, 0x51, 0x55, 0x50, 0xa9, 0x6e, 0x55, 0x69, 0x7a, 0xae, 0xea,
	0x94, 0x3a, 0x57, 0xd5, 0x86, 0xb4, 0xaa, 0x70, 0x71, 0x55, 0x49, 0x3e, 0xaa, 0x74, 0xe0, 0x0a,
	0x93, 0x4c, 0xd0, 0x4a, 0x21, 0x6b, 0x07, 0x73, 0x34, 0x5b, 0x34, 0xe8, 0xc3, 0x0c, 0xec, 0x98,
	0x6e, 0x55, 0xcc, 0x0b, 0x24, 0x2e, 0xd8, 0xdf, 0x78, 0x51, 0xf0, 0x5f, 0x28, 0xfc, 0x0e, 0xf1,
	0x60, 0x30, 0x3f, 0x76, 0xf7, 0x2d, 0x02, 0xd0, 0x5f, 0x19, 0xaf, 0x7e, 0x77, 0xfa, 0x07, 0x7a,
	0xfa, 0x4f, 0xe4, 0x23, 0x38, 0x67, 0x2d, 0x08, 0xd1, 0x57, 0x75, 0x69, 0x6a, 0x74, 0xcb, 0x64,
	0xd8, 0x21, 0x9f, 0xc0, 0xbb, 0xb8, 0x14, 0xf2, 0x5a, 0xc7, 0xae, 0xdf, 0xe2, 0xe8, 0x1e, 0x95,
	0x61, 0x67, 0xd3, 0x37, 0xef, 0x77, 0xf6, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xce, 0x76, 0x73, 0x35,
	0xdf, 0x02, 0x00, 0x00,
}
